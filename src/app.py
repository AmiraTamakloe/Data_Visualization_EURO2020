# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13T_XcGkL6sIbtiEXEVW99UCFy8riCvNI
"""

import dash
import os
from dash import html
from dash import dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output

import pandas as pd

import preprocess
import descriptions
from visualizations import vis1_total_average_goals
from visualizations import vis2_3_tactics_info
from visualizations import vis4_goal_diff
from visualizations import vis5_total_goals
from visualizations import vis6_win_loss_outcome
from visualizations import vis7_outcome_percentage
from visualizations import vis8_match_events
from visualizations import vis2_3_sidebar

app = dash.Dash(__name__)
server = app.server

app.title = 'Euro2020 - INF8808 - Amira Tamakloe'

base_path = os.path.dirname(__file__)
match_info_path = os.path.join(base_path, 'assets/data/match_info.csv')
df_match_info = pd.read_csv(match_info_path)

match_comp_path = os.path.join(base_path, 'assets/data/match_comp_stats.csv')
df_stats_comparison = pd.read_csv(match_comp_path)

match_events_path = os.path.join(base_path, 'assets/data/matcha_event_data.csv')
df_match_events = pd.read_csv(match_events_path)


def display_vis4(df):
    '''
        Imports the .csv file and does some preprocessing.

        Returns:
            A pandas dataframe containing the preprocessed data.
    '''
    df_filtered  = preprocess.drop_useless_columns(df)
    match_df = preprocess.get_statistics(df_filtered)
    fig4 = vis4_goal_diff.init_figure()
    fig4 = vis4_goal_diff.draw(fig4, match_df)
    
    return fig4

def display_vis5(df):
    sorted_goals = preprocess.vis5_get_total_goals(df)
    goals_df = vis5_total_goals.draw_figure(sorted_goals)

    return goals_df

def display_vis6(df):
    final_results = vis6_win_loss_outcome.data_processing(df)
    win_loss_record = vis6_win_loss_outcome.calculate_win_losses(final_results)

    italic_country_names = vis6_win_loss_outcome.make_italic(win_loss_record)
    fig = vis6_win_loss_outcome.draw_bar_chart(italic_country_names, win_loss_record)

    fig.update_traces(
        selector=dict(name='Wins'),
        hoverlabel=dict(bgcolor="#063970")
    )

    fig.update_traces(
        selector=dict(name='Losses'),
        hoverlabel=dict(bgcolor="#2596be", font=dict(color="black"))
    )
    return fig

def display_vis7(df):
    outcome_percentage = preprocess.vis7_get_outcome_percentage(df)
    outcome_df = vis7_outcome_percentage.draw_figure(outcome_percentage)

    return outcome_df

def display_vis8(df):
    data_vis8 = preprocess.vis8_get_filtered_events(df)
    fig8 = vis8_match_events.show_heatmap(data_vis8)
    return fig8
    


def init_app_layout(vis4, vis5, vis6, vis7, vis8):
    '''
        Generates the HTML layout representing the app.

        Args:
            figure: The figure to display.
        Returns:
            The HTML structure of the app's web page.
    '''
    return html.Div(className='content', children=[
        html.Header(children=[
            html.H1('Euro 2020 Data Analysis'),
        ]),
        html.Main(children=[
            dcc.Tabs([
                dcc.Tab(label='Team Performance', 
                    className='custom-tab',
                    selected_className='custom-tab--selected',
                    children=[
                    html.Div(className='viz-container', 
                            children= [
                        dbc.Row([
                            dbc.Col(),
                            html.Div([html.H5(descriptions.vis1_description)], className='description'),
                        ]),
                        dbc.Row(
                            children=[
                            dbc.Col(),
                            html.Div([html.H6(descriptions.vis1_notice)], className='visualization-note'),
                        ]),
                        dcc.Dropdown(
                            id='metric-dropdown',
                            options=[
                                {'label': 'Total Goals', 'value': 'TotalGoals'},
                                {'label': 'Average Goals', 'value': 'AvgGoals'}
                            ],
                            value='TotalGoals',
                            style={'width': '50%'}
                        ),
                        html.Div(
                            style={'flex-direction': 'column', 'display': 'flex', 'align-items': 'center', 'justify-content': 'center', 'width': '100%'}, 
                            children=[
                                dcc.Graph(id='performance-bar-chart', className='graph'),
                                dcc.Graph(id='team-goals-heatmap',  className='graph')
                            ]
                        )
                    ])
                ]),
                dcc.Tab(label='Goals Difference',
                    className='custom-tab',
                    selected_className='custom-tab--selected',
                    children=[
                    html.Div(className='viz-container', children=[
                        html.Div([html.H5(descriptions.vis4_description)], className='description'),
                        dbc.Row([
                            dbc.Col(),
                            html.Div([html.H6(descriptions.vis4_notice)], className='visualization-note'),
                        ]),
                        dcc.Graph(
                            figure=vis4,
                            config=dict(
                                scrollZoom=False,
                                showTips=False,
                                showAxisDragHandles=False,
                                doubleClick=False,
                                displayModeBar=False
                            ),
                            className='graph',
                            id='vis4-goal-diff-chart'
                        )
                    ]),
                ]),
                dcc.Tab(label='Top Matches',
                    className='custom-tab',
                    selected_className='custom-tab--selected',
                    children=[
                    html.Div(className='viz-container', children=[
                        html.Div([html.H5(descriptions.vis5_description)], className='description'),
                        dcc.Graph(
                            figure=vis5,
                            config=dict(
                                scrollZoom=False,
                                showTips=False,
                                showAxisDragHandles=False,
                                doubleClick=False,
                                displayModeBar=False
                            ),
                            className='graph',
                            id='vis5-total-goals-chart'
                        )
                    ]),
                ]),
                dcc.Tab(label='Win-Loss Outcome',
                    className='custom-tab',
                    selected_className='custom-tab--selected',
                    children=[
                    html.Div(className='viz-container', children=[
                        html.Div([html.H5(descriptions.vis6_description)], className='description'),           
                        dbc.Row([
                            dbc.Col(),
                            html.Div([html.H6(descriptions.vis6_notice)], className='visualization-note'),
                        ]),             
                        dcc.Graph(
                            figure=vis6,
                            config=dict(
                                scrollZoom=False,
                                showTips=False,
                                showAxisDragHandles=False,
                                doubleClick=False,
                                displayModeBar=False
                            ),
                            className='graph',
                            id='vis6-total-goals-chart'
                        )
                    ]),
                ]),
                dcc.Tab(label='Home Team Match Outcome', 
                    className='custom-tab',
                    selected_className='custom-tab--selected',                    
                    children=[
                    html.Div(className='viz-container',
                    children=[
                        html.Div([html.H5(descriptions.vis7_description)], className='description'),                        
                        dcc.Graph(
                            figure=vis7,
                            config=dict(
                                scrollZoom=False,
                                showTips=False,
                                showAxisDragHandles=False,
                                doubleClick=False,
                                displayModeBar=False
                            ),
                            className='graph',
                            id='vis7-match-outcome'
                        )
                    ]),
                ]),
                dcc.Tab(label='Strategies Comparison', 
                    className='custom-tab',
                    selected_className='custom-tab--selected',
                    children=[
                    html.Div(className='viz-container', children=[
                        dbc.Row([
                            dbc.Col(),
                            html.Div([html.H5(descriptions.vis2_vis3_description)], className='description'),
                        ]),
                        dbc.Row([
                            dbc.Col(sidebar),
                            dbc.Col(dcc.Graph(id='score-graph', className='stacked-graph'), width=9, align='center', style = {'margin-top':'3px'})
                        ]),
                        dbc.Row([
                            dbc.Col(),
                            dbc.Col(dcc.Graph(id='match_stats', className='stacked-graph'),width=9, align='center', style={'margin-top': '3px'})
                        ])
                    ])
                ]),
                dcc.Tab(label='Events Progression', 
                    className='custom-tab',
                    selected_className='custom-tab--selected',                    
                    children=[
                    html.Div(className='viz-container',
                    style={'display': 'flex', 'justify-content': 'center', 'align-items': 'center'},        
                    children=[
                        html.Div([html.H5(descriptions.vis8_description)], className='description'),                        
                        dcc.Graph(
                            figure=vis8,
                            config=dict(
                                scrollZoom=False,
                                showTips=False,
                                showAxisDragHandles=False,
                                doubleClick=False,
                                displayModeBar=False
                            ),
                            className='graph',
                            id='vis8-match-events'
                        )
                    ]),
                ]),
            ])
        ]),
    ])


df_goals_agg, df_goals, df_matches_info = preprocess.vis1_get_goals_data(df_match_info)
vis1_total_average_goals.register_callbacks(app, df_goals_agg, df_goals, df_matches_info)

vis2_3_tactics_info.register_callbacks(app, df_stats_comparison)

fig4 = display_vis4(df_match_info)

fig5 = display_vis5(df_match_info)

fig6 = display_vis6(df_match_info)

fig7 = display_vis7(df_match_info)

fig8 = display_vis8(df_match_events)

sidebar = vis2_3_sidebar.create_sidebar_layout(df_stats_comparison)

app.layout = init_app_layout(fig4, fig5, fig6, fig7, fig8)
